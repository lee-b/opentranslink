#!/usr/bin/env python2

from __future__ import print_function

import os, sys

THIS_DIR = os.path.dirname(__file__)
PARENT_DIR = os.path.abspath(os.path.join(THIS_DIR, ".."))

if PARENT_DIR not in sys.path:
    sys.path = [ PARENT_DIR, ] + sys.path

import opentranslink
import opentranslink.services

from opentranslink.services.nir import *

def do_trains_from_to_ids(src_id, dst_id, station_mapper):
    for item in get_departures_by_station_ids(src_id, dst_id, station_mapper):
        pretty_print_departure(item, station_mapper)

def do_trains_from_to_names(src_name, dst_name, station_mapper):
    src_id = station_mapper.id_for_name(src_name)
    dst_id = station_mapper.id_for_name(dst_name)
    return do_trains_from_to_ids(src_id, dst_id, station_mapper)

def exit_usage():
    print("\nUsage:\n")
    print("\t" + sys.argv[0] + " list_stations\n", file=sys.stderr)
    print("\t" + sys.argv[0] + " from_to_ids src_station_id dst_station_id\n", file=sys.stderr)
    print("\t" + sys.argv[0] + " from_to_names src_station_name dst_station_name\n", file=sys.stderr)
    sys.exit(20)



if __name__ == "__main__":
    try:
        mode = sys.argv[1].lower()
    except IndexError:
        exit_usage()

    station_mapper = get_station_mapper()

    if mode == "from_to_ids":
        try:
            src_id = unicode(sys.argv[2])
            dst_id = unicode(sys.argv[3])
        except IndexError:
            exit_usage()

        if not station_mapper.id_is_valid(src_id):
            print(u"\nERROR: Station Id '%s' is not valid.  Known station ids are:\n\t'" % (src_id,), u"'\n\t'".join(station_mapper.all_ids()) + u"'", file=sys.stderr)
            sys.exit(20)

        if not station_mapper.id_is_valid(dst_id):
            print(u"\nERROR: Station Id '%s' is not valid.  Known station ids are:\n\n\t" % (dst_id,), u"'\n\t'".join(station_mapper.all_ids()) + u"'", file=sys.stderr)
            sys.exit(20)

        sys.exit(do_trains_from_to_ids(src_id, dst_id, station_mapper))

    elif mode == "from_to_names":
        try:
            src_name = unicode(sys.argv[2])
            dst_name = unicode(sys.argv[3])
        except IndexError:
            exit_usage()

        if not station_mapper.name_is_valid(src_name):
            print(u"\nERROR: Station name '%s' is not valid.  Known station names are:\n\t'" % (src_name,), u"'\n\t'".join(station_mapper.all_names()) + u"'", file=sys.stderr)
            sys.exit(20)

        if not station_mapper.name_is_valid(dst_name):
            print(u"\nERROR: Station name '%s' is not valid.  Known station names are:\n\t'" % (dst_name,), u"'\n\t'".join(station_mapper.all_names()) + u"'", file=sys.stderr)
            sys.exit(20)

        sys.exit(do_trains_from_to_names(src_name, dst_name, station_mapper))

    elif mode == "list_stations":
        sorted_keys = list(station_mapper.all_names())
        sorted_keys.sort()

        for station_name in sorted_keys:
            station_id = station_mapper.id_for_name(station_name)
            print("    %-60s (%s)" % (station_name, station_id))

        sys.exit(0)

    else:
        exit_usage()


